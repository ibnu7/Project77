const path=require("path");const{createDecipheriv,createHash}=require("crypto");const{readFileSync,existsSync}=require("fs");const readlineSync=require("readline-sync");var file_path=readlineSync.question(" [â€¢] Put File Path .sks: ");if(!file_path||!existsSync(file_path)){console.log("[ERROR] Invalid or unspecified path/file");process.exit(1)}var file=file_path;if(path.parse(file).ext!==".sks"){console.log("[ERROR] Invalid file extension. Expected '.sks'.");process.exit(1)}try{JSON.parse(readFileSync(file).toString())}catch(o){console.log("[ERROR] Invalid JSON data!");process.exit(1)}let configFile=JSON.parse(readFileSync(file).toString());const configKeys=["662ede816988e58fb6d057d9d85605e0","162exe235948e37ws6d057d9d85324e2","962exe865948e37ws6d057d4d85604e0","175exe868648e37wb9x157d4l45604l0","175exe867948e37wb9d057d4k45604l0","4ff28c2f2f22edfe30580a057e4e5bac"];function aesDecrypt(o,e,s){const t=createDecipheriv("aes-256-cbc",Buffer.from(e,"base64"),Buffer.from(s,"base64"));let l=t.update(o,"base64","utf-8");l+=t.final("utf-8");return l}function md5crypt(o){return createHash("md5").update(o).digest("hex")}function parseConfig(o){console.log("\nðŸ’» Read Config By ENZOâ„¢ Tools\n* t.me/EstebanZxx\n* t.me/XDecrytorID\n==========================");console.log(`[</>] [SSH Server] : ${o.sshServer}`);console.log(`[</>] [SSH Port] : ${o.sshPort}`);console.log(`[</>] [SSH Username] : ${o.profileSshAuth.sshUser}`);if(!!o.profileSshAuth.sshPasswd){console.log(`[</>] [SSH Password] : ${o.profileSshAuth.sshPasswd}`)}if(!!o.profileSshAuth.sshPublicKey){console.log(`[</>] [SSH Public Key:\n${o.profileSshAuth.sshPublicKey}`)}if(!!o.enableDataCompression){console.log(`[</>] [Enable data compression] : ${o.enableDataCompression}`)}if(!!o.disableTcpDelay){console.log(`[</>] [Disable TCP Delay] : ${o.disableTcpDelay}`)}if(!!o.proxyType){console.log(`[</>] [Connection type] : ${o.proxyType=="PROXY_HTTP"?"SSH + HTTP":o.proxyType=="PROXY_SSL"?"SSH + SSL/TLS":"Undefined"}`)}else{console.log(`[</>] [Connection type: SSH DIRECT`)}if(!!o.proxyHttp){if(!!o.proxyHttp.proxyIp){console.log(`[</>] [Proxy Host] : ${o.proxyHttp.proxyIp}`)}if(!!o.proxyHttp.proxyPort){console.log(`[</>] [Proxy Port] : ${o.proxyHttp.proxyPort}`)}if(!!o.proxyHttp.isCustomPayload){console.log(`[</>] [Use custom payload for proxy] : ${o.proxyHttp.isCustomPayload}`)}if(!!o.proxyHttp.customPayload){console.log(`[</>] [Proxy Payload] : \n${o.proxyHttp.customPayload}`)}}if(!!o.proxySsl){if(!!o.proxySsl.hostSni){console.log(`[</>] [SSL/SNI Value] : ${o.proxySsl.hostSni}`)}if(!!o.proxySsl.versionSSl){console.log(`[</>] [SSL Version] : ${o.proxySsl.versionSSl}`)}if(!!o.proxySsl.isSSLCustomPayload){console.log(`[</>] [Use custom payload for SSL] : ${o.proxySsl.isSSLCustomPayload}`)}if(!!o.proxySsl.customPayloadSSL){console.log(`[</>] [SSL Payload:\n${o.proxySsl.customPayloadSSL}`)}}if(!!o.proxyDirect){if(!!o.proxyDirect.isCustomPayload){console.log(`[</>] [Use custom payload] : ${o.proxyDirect.isCustomPayload}`)}if(!!o.proxyDirect.customPayload){console.log(`[</>] [Payload] : ${o.proxyDirect.customPayload}`)}}if(!!o.dnsCustom){console.log(`[</>] [Custom DNS Servers] : ${JSON.stringify(o.dnsCustom)}`)}if(!!o.isUdpgwForward){console.log(`[</>] [Forward UDP via UDPGW] : ${o.isUdpgwForward}`)}if(!!o.configProtect){if(!!o.configProtect.blockConfig){console.log(`[</>] [Block config] : ${o.configProtect.blockConfig}`)}if(!!o.configProtect.validity){console.log(`[</>] [Expire Date] : ${new Date(o.configProtect.validity).toString()}`)}if(!!o.configProtect.blockRoot){console.log(`[</>] [Block rooted devices] : ${o.configProtect.blockRoot}`)}if(!!o.configProtect.blockAuthEdition){console.log(`[</>] [Block non-PlayStore app] : ${o.configProtect.blockAuthEdition}`)}if(!!o.configProtect.onlyMobileData){console.log(`[</>] [Use only mobile data] : ${o.configProtect.onlyMobileData}`)}if(!!o.configProtect.blockByPhoneId){console.log(`[</>] [Enable HWID] : ${o.configProtect.blockByPhoneId}`)}if(!!o.configProtect.message){console.log(`[</>] [Note field] :\n${o.configProtect.message}`)}if(!!o.configProtect.phoneId){console.log(`[</>] [HWID Value] : ${o.configProtect.phoneId}`)}if(!!o.configProtect.hideMessageServer){console.log(`[</>] [Hide SSH Server Message] : ${o.configProtect.hideMessageServer}`)}console.log("==========================");return}}try{parseConfig(JSON.parse(aesDecrypt(configFile.d.split(".")[0],Buffer.from(md5crypt(configKeys[1]+" "+configFile.v)).toString("base64"),configFile.d.split(".")[1])))}catch(o){console.log(`[ERROR] Decryption failed! ${o}`);process.exit(1)}